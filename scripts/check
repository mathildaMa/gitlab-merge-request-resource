#!/bin/bash
# vim: set ft=sh

set -e -u

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

TMPDIR=${TMPDIR:-/tmp}

source "$(dirname "$0")/common.sh"
sh "$(dirname "$0")/ext.sh"

payload="$(mktemp "${TMPDIR}/gitlab-merge-request-resource.XXXXXX")"

cat > "${payload}" <&0

debug="true"

configure_ssl_verification "${payload}"

uri="$(jq -r '.source.uri // ""' < "${payload}")"
private_token="$(jq -r '.source.private_token // ""' < "${payload}")"
no_ssl="$(jq -r '.source.no_ssl // ""' < "${payload}")"
project_id="$(jq -r '.source.project_id // ""' < "${payload}")"
version_sha="$(jq -r '.version.sha // ""' < "${payload}")"

if [[ "${uri}" == *"git@"* ]]; then
  gitlab_host="$(echo "${uri}" | sed -rn 's/.*git@(.*):([0-9]*\/+)?(.*)\.git/\1/p')"
  port="$(echo "${uri}" | sed -rn 's/.*git@(.*):([0-9]*\/+)?(.*)\.git/\2/p')"
  port=${port///} # remove trailing slash
  project_path="$(echo "${uri}" | sed -rn 's/.*git@(.*):([0-9]*\/+)?(.*)\.git/\3/p')"
  protocol='https'
else
  gitlab_host="$(echo "${uri}" | sed -rn 's/(https?):\/\/([^\/]*)\/(.*)\.git/\2/p')"
  project_path="$(echo "${uri}" | sed -rn 's/(https?):\/\/([^\/]*)\/(.*)\.git/\3/p')"
  protocol="$(echo "${uri}" | sed -rn 's/(https?):\/\/([^\/]*)\/(.*)\.git/\1/p')"
fi

if [ "${no_ssl}" == 'true' ]; then
    protocol='http'
fi

if [ "${project_id}" == [0-9]* ]; then
    project_path=${project_id}
fi

version_updated_at=0
if [ ! -z "${version_sha}" ]; then
    version_updated_at="$(curl -s -H "private-token: ${private_token}" "${protocol}://${gitlab_host}/api/v4/projects/$(urlencode "${project_path}")/repository/commits/${version_sha}" \
        | jq '.committed_date|.[:19]|strptime("%Y-%m-%dT%H:%M:%S")|mktime')"
fi

open_mrs="$(curl -s -H "private-token: ${private_token}" "${protocol}://${gitlab_host}/api/v4/projects/$(urlencode "${project_path}")/merge_requests?state=opened&order_by=updated_at")"
num_mrs="$(echo "${open_mrs}" | jq 'length')"

if [ $debug == 'true' ]; then
    echo "open_mrs"
    echo "curl -s -H "private-token: ${private_token}" "${protocol}://${gitlab_host}/api/v4/projects/$(urlencode "${project_path}")/merge_requests?state=opened&order_by=updated_at""
fi

new_versions=''

for i in $(seq 0 $((num_mrs - 1))); do
    mr="$(echo "${open_mrs}" | jq -r '.['"$i"']')"
    mr_sha="$(echo "${mr}" | jq -r '.sha')"
    if [ "${mr_sha}" != "null" ]; then
        mr_updated_at="$(curl -s -H "private-token: ${private_token}" "${protocol}://${gitlab_host}/api/v4/projects/$(urlencode "${project_path}")/repository/commits/${mr_sha}" \
            | jq '.committed_date|.[:19]|strptime("%Y-%m-%dT%H:%M:%S")|mktime')"
        if [ "${mr_updated_at}" -gt "${version_updated_at}" ] || [ -z "${version_sha}" ]; then
            new_versions="${new_versions},{\"sha\":\"${mr_sha}\"}"
        fi
    fi
done

if [ $debug == 'true' ]; then
    echo "mr_updated_at"
    echo "curl -s -H "private-token: ${private_token}" "${protocol}://${gitlab_host}/api/v4/projects/$(urlencode "${project_path}")/repository/commits/${mr_sha}""
fi
new_versions="${new_versions#','}" # remove trailing comma
new_versions="[${new_versions}]" # make JSON array

if [ "${new_versions}" == '[]' ] && ! [ -z "${version_sha}" ]; then
    new_versions="[{\"sha\":\"${version_sha}\"}]"
fi

if [ $debug == 'true' ]; then
    echo "new versions"
    echo "${new_versions}"
fi

jq -n "${new_versions}" >&3
